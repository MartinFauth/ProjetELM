import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onInput,onClick)
import Random
import List
import Time

index : (List String, Int) -> Result String String
index (list,b) = case (list,b) of
    ([],_) ->
        Err "List index out of range"
    (h::t,0) -> 
        Ok h
    (h::t,a) -> 
        index (t,a-1)

listemots = ["Exemple","Ornithorynque","Orange","Pomme"]
listedef = ["""nom masculin : 1. Personne, acte considérés comme un modèle servant de référence à une conduite : Il n'a pas suivi le mauvais exemple de ses prédécesseurs.
2. Ce qui constitue une leçon, comporte un effet dissuasif.
3. Fait, cas antérieur semblable ou comparable à ce dont il s'agit.
4. Fait, chose, comportement de quelqu'un qui illustre une assertion, qui est caractéristique de quelque chose.
5. Citation littéraire ou énoncé forgé servant à montrer le fonctionnement d'une règle de grammaire ou, dans un article de dictionnaire, à illustrer et à justifier la définition du mot traité.""","nom masculin : Mammifère monotrème, adapté à la vie semi-aquatique, d'Australie orientale et de Tasmanie, caractérisé par un bec de canard, des pattes palmées, une queue aplatie et une reproduction ovipare.","Fruit comestible de l'oranger, de forme sphérique à ovale, à la peau orangé rougeâtre contenant une huile essentielle d'odeur caractéristique et dont la pulpe est juteuse et sucrée. 2. Couleur","nom féminin : 1. Fruit du pommier, charnu, de forme plus ou moins arrondie, de couleur verte, jaune ou rouge selon la variété, que l'on consomme frais, en compote, en beignets et dont on fait le cidre ou des jus.,2. Objet, partie d'objet ou ornement de forme arrondie : La pomme d'une canne.,3. Partie centrale d'un légume (chou, laitue) dont les feuilles serrées sont disposées en boule.,4. Pomme de terre : Bifteck aux pommes.,5. Familier. Tête, visage.,6. Populaire. Individu stupide qui se laisse berner.,7. Accessoire d'appareil de douche, percé de petits trous par lesquels s'écoule l'eau."]




-- MAIN


main =
    Browser.sandbox { init = init, update = update, view = view }



-- MODEL


type alias Model =
  { mot : String
  , definition : String
  , motatrouve : String
  , message : String
  , suivant : Int
  , seed : Random.Seed
  }


init : Model
init =
  {mot = "", definition = "", motatrouve = "", message = "", suivant = 0, seed = Random.initialSeed 42}



-- UPDATE


type Msg
  = Mot String
  | MotATrouve
  | Suivant


update : Msg -> Model -> Model
update msg model =
  case msg of
    Mot mot ->
      { model | mot = mot }
    MotATrouve ->
        if model.mot == model.motatrouve then
            {model | message = "Correct!"}
        else
            {model | message = "Incorrect, essaie encore!"}
    Suivant -> 
       let
        (suivant,seed) = Random.step (Random.int 0 (List.length listemots - 1)) model.seed
        motatrouveR = index (listemots,suivant)
        definitionR = index (listedef,suivant)
        motatrouve = Result.withDefault "" motatrouveR
        definition = Result.withDefault "" definitionR
      in
        { model | motatrouve = motatrouve, definition = definition, suivant = suivant, seed = seed }
    



-- VIEW


view : Model -> Html Msg
view model =
  div []
    [ viewInput "text" "Mot" model.mot Mot
    , div [] [text model.definition]
    , button [ onClick MotATrouve ] [ text "Deviner" ]
    , div [] [ text model.message ]
    , button [onClick Suivant] [text "Suivant"]
    ]


viewInput : String -> String -> String -> (String -> msg) -> Html msg
viewInput t p v toMsg =
  input [ type_ t, placeholder p, value v, onInput toMsg ] []